/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    int maxDepthofNode(TreeNode* node,int &maxi){

        if(node==NULL)
            return 0;

        int maxDepthonLeft = maxDepthofNode(node->left,maxi);
        int maxDepthonRight = maxDepthofNode(node->right,maxi);
        maxi = max(maxi,maxDepthonLeft+maxDepthonRight);
        return 1 + max(maxDepthonLeft,maxDepthonRight);
    }


    int diameterOfBinaryTree(TreeNode* root) {

        int maxi = 0; 

        maxDepthofNode(root,maxi);

        return maxi;
    }
};
