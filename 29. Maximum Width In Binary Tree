//SC :  O(N) -- queue data structure
//TC :  O(N) -- level order traversal

#include <bits/stdc++.h> 
/************************************************************

    Following is the TreeNode class structure

    template <typename T>
    class TreeNode {
       public:
        T val;
        TreeNode<T> *left;
        TreeNode<T> *right; 

        TreeNode(T val) {
            this->val = val;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/

int getMaxWidth(TreeNode<int> *root)
{
    // Write your code here.
    if(root==NULL)
    return 0;

    queue<pair<TreeNode<int>*, int>>q;
    q.push({root,0});

    int ans=0;
    while(!q.empty())
    {
        int siz = q.size();
        ans=max(ans,siz);
        for(int i=0;i<siz;i++)
        {
            TreeNode<int> *temp = q.front().first;
            int index = q.front().second;
            q.pop();

            if(temp->left)
            q.push({temp->left,2*index+1});

            if(temp->right)
              q.push({temp->right, 2 * index + 2});
        }

        // ans = max(ans, ri-le);
    }
    return ans;
}


//optimised 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
         if(root==NULL)
        return 0;
    int ans = 0;
    queue<pair<TreeNode*,long long int>> q;
    q.push({root,0});
   
    while(!q.empty()){
        int size = q.size();
        int mmin = q.front().second;
        int first,last;
        for(int i=0;i<size;i++){
            long long int cur_idx =  q.front().second - mmin;
            TreeNode * node = q.front().first;
            q.pop();
            
            if(i==0) first = cur_idx;
            if(i==size-1) last = cur_idx;

            if(node->left)
                q.push({node->left,cur_idx*2+1});
            if(node->right)
                q.push({node->right,cur_idx*2+2});
        }
        
        ans = max(ans,last-first+1);
    }
    
    return ans;
    }
};
