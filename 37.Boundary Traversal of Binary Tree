#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure:
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/

bool isLeaf(TreeNode<int>* node){
    if(!node->left && !node->right)
        return true;
    else 
        return false;
}

void leftSideNodesWithoutLeaf(TreeNode<int>* root,vector<int> &ans){

    TreeNode<int>* cur = root->left;
    
    while(cur)
    {
        
    if(!isLeaf(cur))
        ans.push_back(cur->data);

    if(cur->left)
        cur = cur->left;
    else
        cur = cur->right;
        
    }
}

void leafNodes(TreeNode<int>* root,vector<int> &ans){

    TreeNode<int>* cur = root;

    if(isLeaf(cur)){
        ans.push_back(cur->data);
        return;
    }
    if(cur->left)
        leafNodes(cur->left,ans);
    if(cur->right)
        leafNodes(cur->right,ans);

}


void rightSideNodesWithoutLeaf(TreeNode<int>* root,vector<int> &ans){

    TreeNode<int>* cur = root -> right;

    vector<int> tmp;

    while(cur){
        
        if(!isLeaf(cur)) 
            tmp.push_back(cur->data);

        if(cur->right) cur = cur->right;
        else cur = cur->left; 
            

    }

    for(int i=tmp.size() - 1;i>=0;i--){
        ans.push_back(tmp[i]);
    }

}


vector<int> traverseBoundary(TreeNode<int>* root){
    // Write your code here.
    vector<int> ans;
    if(!root) return ans;

    if(!isLeaf(root)) ans.push_back(root->data);

    leftSideNodesWithoutLeaf(root,ans);

    leafNodes(root,ans);

    rightSideNodesWithoutLeaf(root,ans);

    return ans;

}
